{"version":3,"sources":["webpack:///./src/components/Ribbon/ribbon.js","webpack:///./src/components/StatsCard/StatsCard.js","webpack:///./src/components/StatsCard/index.js","webpack:///./src/pages/dashboard.js"],"names":["Ribbon","props","id","title","replace","options","root","rootMargin","threshold","useEffect","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","document","getElementById","target","classList","add","remove","console","log","observe","unobserve","className","StatsCard","name","count","Container","Stats","StatsLabel","styled","div","theme","boxShadow","md","surface","main","Dashboard","data","useState","allTimeStats","setAllTimeStats","todayStats","setTodaytats","today","moment","format","fetchGAAlltimeData","fetchGATodayData","a","fetch","rawData","json","totalsForAllResults","pathname","logo","query"],"mappings":"0KA4CeA,IAvCA,SAAAC,GACb,IAAMC,EAAKD,EAAME,MAAMC,QAAQ,OAAQ,IACnCC,EAAU,CACZC,KAAM,KACNC,WAAY,MACZC,UAAW,GAyBb,OArBAC,qBAAU,WACR,IAAIC,EAAW,IAAIC,sBAAqB,SAACC,EAASF,GAChDE,EAAQC,SAAQ,SAAAC,GACTA,EAAMC,gBACLC,SAASC,eAAT,GAA2BH,EAAMI,OAAOhB,IAAMiB,UAAUC,IAAI,UAE5DN,EAAMC,gBACNC,SAASC,eAAT,GAA2BH,EAAMI,OAAOhB,IAAMiB,UAAUE,OAAO,eAGtEhB,GAECa,EAASF,SAASC,eAAef,GAIrC,OAHAoB,QAAQC,IAAI,UAAWrB,EAAIgB,GAC3BR,EAASc,QAAQN,GAEV,WACHR,EAASe,UAAUP,MAEvB,IAGA,wBAAIQ,UAAU,sBACZ,uBAAGxB,GAAIA,EAAIwB,UAAU,oCAClBzB,EAAME,U,qQC5BAwB,EAPG,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAT,OAChB,kBAACC,EAAD,KACE,kBAACC,EAAD,KAAQF,GACR,kBAACG,EAAD,KAAaJ,KAMXE,EAAYG,IAAOC,IAAV,uEAAGD,CAAH,6KAOC,uBAAGE,MAAqBC,UAAUC,MAC5B,uBAAGF,MAAqBG,QAAQC,QAIhDR,EAAQE,IAAOC,IAAV,mEAAGD,CAAH,qCAKLD,EAAaC,IAAOC,IAAV,wEAAGD,CAAH,mCC3BDN,I,sUCqDAa,UA7CG,SAAC,GAAa,EAAXC,KAAY,IAAD,EAEUC,mBAAS,GAA1CC,EAFuB,KAETC,EAFS,OAGKF,mBAAS,GAArCG,EAHuB,KAGXC,EAHW,KAIxBC,EAAQC,MAASC,OAAO,cAE9BxC,qBAAU,WAERyC,IACAC,MACC,IAEH,IAAMD,EAAkB,6BAAG,kCAAAE,EAAA,sEACHC,MAAM,mGACyEN,EAD1E,yBADF,cACnBO,EADmB,gBAIaA,EAAQC,OAJrB,oBAIjBd,KAAQA,GAJS,aAIA,GAJA,GAITA,KAChBG,EAAgBH,EAAKe,oBAAoB,iBALhB,4CAAH,qDAQlBL,EAAgB,6BAAG,kCAAAC,EAAA,sEACDC,MAAM,gFACsDN,EADvD,YACwEA,EADxE,yBADJ,cACjBO,EADiB,gBAIeA,EAAQC,OAJvB,oBAIfd,KAAQA,GAJO,aAIE,GAJF,GAIPA,KAChBnB,QAAQC,IAAI,SAAUkB,EAAKe,oBAAoB,iBAC/CV,EAAaL,EAAKe,oBAAoB,iBANf,4CAAH,qDAStB,OACE,kBAAC,IAAD,CAAQC,SAAU,eAChB,6BAAS/B,UAAU,uBACjB,kBAAC,IAAD,CAAYvB,MAAM,YAAYuD,KAAK,0BACnC,yBAAKhC,UAAU,8BACb,kBAAC,IAAD,CAAQvB,MAAM,uBAEhB,6BAASuB,UAAU,+BACjB,kBAAC,EAAD,CAAWE,KAAK,iBAAiBC,MAAOc,IACxC,kBAAC,EAAD,CAAWf,KAAK,cAAcC,MAAOgB,QAtC/C,IA+Cac,EAAK","file":"component---src-pages-dashboard-js-7aac693c4810a5435c51.js","sourcesContent":["import React, { useEffect } from 'react'\n\nimport './ribbon.scss'\nimport '../../styles/animation.scss'\n\nconst Ribbon = props => {\n  const id = props.title.replace(/\\s+/g, '')\n  let options = {\n    root: null,\n    rootMargin: '0px',\n    threshold: 1.0,\n  }\n\n\n  useEffect(() => {\n    let observer = new IntersectionObserver((entries, observer) => {\n      entries.forEach(entry => {\n          if(entry.isIntersecting) {\n              document.getElementById(`${entry.target.id}`).classList.add('expand');\n          }\n          if(!entry.isIntersecting) {\n              document.getElementById(`${entry.target.id}`).classList.remove('expand');\n          }\n        });\n    }, options);\n\n    let target = document.getElementById(id);\n    console.log('load >>', id, target);\n    observer.observe(target);\n\n    return () => {\n        observer.unobserve(target);\n    }\n  },[]);\n\n  return (\n    <h3 className=\"kbts-ribbon-header\">\n      <i id={id} className=\"kbts-ribbon-header-text animated\">\n        {props.title}\n      </i>\n    </h3>\n  )\n}\n\nexport default Ribbon\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst StatsCard = ({ name, count }) => (\n  <Container>\n    <Stats>{count}</Stats>\n    <StatsLabel>{name}</StatsLabel>\n  </Container>\n)\n\nexport default StatsCard\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  padding: 20px;\n  height: 140px;\n  box-shadow: ${({ theme }) => `${theme.boxShadow.md}`};\n  background-color: ${({ theme }) => `${theme.surface.main}`};\n  border-radius: .55rem;\n`\n\nconst Stats = styled.div`\n  font-size: 48px;\n  font-weight: 300;\n`\n\nconst StatsLabel = styled.div`\n  font-size: 15px;\n  color: #a4a5a7;\n`\n","import StatsCard from './StatsCard';\n\nexport default StatsCard;","import React, { useState, useEffect } from 'react'\nimport moment from 'moment'\n\nimport Layout from '../components'\nimport PageHeader from '../components/page-header/page-header'\nimport Ribbon from '../components/Ribbon/ribbon'\nimport StatsCard from '../components/StatsCard'\n\nimport '../pageCSS/dashboard.scss'\n\nconst Dashboard = ({ data }) => {\n  // Client-side Runtime Data Fetching\n  const [allTimeStats, setAllTimeStats] = useState(0);\n  const [todayStats, setTodaytats] = useState(0);\n  const today = moment().format('YYYY-MM-DD')\n\n  useEffect(() => {\n    // get data from GitHub api\n    fetchGAAlltimeData()\n    fetchGATodayData()\n  }, [])\n\n  const fetchGAAlltimeData = async () => {\n    const rawData = await fetch(\n      `https://us-central1-kbtechspace-8907.cloudfunctions.net/gaPageView?startDate=2018-04-24&endDate=${today}&metrics=ga:pageviews`\n    )\n    const { data: { data } = {} } = await rawData.json()\n    setAllTimeStats(data.totalsForAllResults['ga:pageviews']);\n  }\n\n  const fetchGATodayData = async () => {\n    const rawData = await fetch(\n      `https://us-central1-kbtechspace-8907.cloudfunctions.net/gaPageView?startDate=${today}&endDate=${today}&metrics=ga:pageviews`\n    )\n    const { data: { data } = {} } = await rawData.json()\n    console.log('today:', data.totalsForAllResults['ga:pageviews']);\n    setTodaytats(data.totalsForAllResults['ga:pageviews']);\n  }\n\n  return (\n    <Layout pathname={'/dashboard/'}>\n      <section className=\"kbts-page-dashboard\">\n        <PageHeader title=\"Dashboard\" logo=\"fas fa-tachometer-alt\" />\n        <div className=\"kbts-page-dashboard-ribbon\">\n          <Ribbon title=\"Monitoring Myself\" />\n        </div>\n        <section className=\"kbts-page-dashboard-service\">\n          <StatsCard name=\"All Time Views\" count={allTimeStats} />\n          <StatsCard name=\"Today Views\" count={todayStats} />\n        </section>\n      </section>\n    </Layout>\n  )\n}\n\nexport default Dashboard\n\nexport const query = graphql`\n  query serviceDashboard {\n    allAboutJson {\n      edges {\n        node {\n          title\n          description\n          icon\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}